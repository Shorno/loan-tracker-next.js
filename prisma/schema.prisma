generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  clients       Client[]
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  phone                String
  address              String
  serialNumber         Int      @unique
  loanGuarantorPhone   String?
  loanGuarantorName    String?
  loanGuarantorAddress String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdBy            User     @relation(fields: [createdById], references: [id])
  createdById          String   @db.ObjectId
  loan                 Loan?
}

model Loan {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  amount          Int
  interestRate    Int
  totalPayable    Int?
  remainingAmount Int?
  paidAmount      Int
  test            Int
  totalSavings    Int
  startDate       DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  client          Client    @relation(fields: [clientId], references: [id])
  clientId        String    @unique @db.ObjectId
  payments        Payment[]
}

model Payment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Int
  date      DateTime
  savings   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  loan      Loan     @relation(fields: [loanId], references: [id])
  loanId    String   @db.ObjectId
}